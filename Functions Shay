#include "myHeaders.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning(disable: 4996)

// macros for ez life while printing
#define PRINT_ROOM(roomNumber ,  sleepNumber ,  breakfastNumber) \
(printf("room number %d has %d people staying in the room and %d people have reserved breakfast \n", roomNumber, sleepNumber, breakfastNumber));
#define PRINT_EMPTY_ROOM(number) (printf("room number %d is empty \n", number));

#define PRINT_CUSTOMER(id , name, creditCardNumber , creditCardYear , creditcardMonth) \
(printf("customer: id: %d \t name: %s \t creditNumber: %s \t creditYear: %d \t creditMonth: %d\n", id , name , creditCardNumber , creditCardYear, creditCardYear));

// 5.1
void showHotelStatus(hotel_t *hotel)
{
	// itarate over all hotel's rooms matrix and print each one
	int i = 0;
	int j = 0;
	while (i < hotel->numOfFloors)
	{
		j = 0;
		while (j < hotel->numOfRoomPerFloor)
		{
			room_t*room = &hotel->allRooms[i][j];
			printRoom(room, i, j);
			j++;
		}
		i++;
	}
}
// 5.5 (5.1 use this)
void printRoom(room_t *room, int floorNumber, int numberInsideFloor)
{
	if (room == NULL || room->available == 1)
	{
		PRINT_EMPTY_ROOM((floorNumber + 1) * 100 + numberInsideFloor + 1)
	}
	else
	{
		PRINT_ROOM((floorNumber + 1) * 100 + numberInsideFloor + 1, room->sleepRegisterd, room->breakfastRegisterd)
	}
}

//5.2 + (6 is inside)
int addCustomer(customer_t *customerPointer, char* name, char* creditCardNumber, int year, int month)
{
	/*
	steps:
	- check that input is valid, if not there is no meaning for the rest of the function.
	- allocate memory for name and credit card number (assuminig the memory pointer
	given has allready been allocated).
	- put all values inside the correct places.
	*/
	static int counter = 1; // will assign id for customers

							// data check:
	if (year < 2010 || year > 2020)
	{
		return 0;
	}
	else if (month < 1 || month > 12)
	{
		return 0;
	}
	else if (strlen(creditCardNumber) != CREDIT_CARD_LENGTH)
	{
		return 0;
	}

	// allocate memory for both name and credit card number + 1 for '\0'
	customerPointer->name = (char *)calloc(sizeof(char*), strlen(name) + 1);
	customerPointer->creditCardNumber = (char *)calloc(sizeof(char*), CREDIT_CARD_LENGTH + 1);
	// TOODO CHECK if need to allocate memory for name or/and creditCardNumeber


	// put all values in the correct places
	customerPointer->id = counter++;
	customerPointer->name = name;
	customerPointer->creditCardYear = year;
	customerPointer->creditCardMonth = month;
	customerPointer->creditCardNumber = creditCardNumber;


	return 1;
}

// 7
void customersNameCapital(management_t *manage)
{
	// loop threw all customers and run them by check and change method for each customer's name
	int i;
	for (i = 0; i < manage->currentAllCustomersSize; i++)
	{
		checkAndChangeSinglePersonCapital(manage->allCustomers + i);
	}

}
// 7 helper
void checkAndChangeSinglePersonCapital(customer_t* customer)
{
	if (customer != NULL)
	{
		// extract the first letter
		char firstLetter = *(customer->name);

		if (firstLetter >= 97 && firstLetter <= 122) // check if letter is small sized letter
		{
			//change the value of the pointer to big lettter (-32)
			customer->name[0] = firstLetter - 32;
		}


	}
}
//5.4 (not completed)
void checkIn(management_t* manage)
{
	/*
	steps:
	- display all customers for user
	- give user option to choose customer by writing their name
	- if customer inside tell the user that he is inside the system
	- else give the user to input new user inside the system

	*/

	//print all customers
	customer_t *cArray = manage->allCustomers;
	int cArrraySize = manage->currentAllCustomersSize;
	int i = 0;
	while(i < cArrraySize)
	{
		customer_t *pos = cArray + i;
		PRINT_CUSTOMER(pos->id, pos->name, pos->creditCardNumber, pos->creditCardYear, pos->creditCardMonth)
		i++;
	}

	printf("\nplease enter the id of the customer u want to choose, for new customer enter 0 \n");
	int chosenIndex;
	scanf("%d", &chosenIndex);
	
	int found = 0;
	
	// room's attributes declerations
	int numberOfSleepInRoom;
	int numberOfBreakfastInRoom;

	// customer's attributes declerations
	char *customerName;
	int creditCardYear;
	int creditCardMonth;
	char *creditCardNumber;


	if (chosenIndex)
	{
		// go over customers array and check if the person that have been typed exsist
		int j = 0;
		customer_t *currentCustomer = NULL; // Initialize value with null
		while (j < cArrraySize && !found)
		{
			currentCustomer = (cArray + j);
			if (chosenIndex == currentCustomer->id)
			{
				found = 1;
			}
			j++;
		}
		if (!found)
		{
			printf("\ncustomer hasent been found \n");
		}
		else
		{
			getInfoForCheckInRoom(&numberOfSleepInRoom, &numberOfBreakfastInRoom);
			int validtyCheck = reservationDataValidityCheck(numberOfSleepInRoom, numberOfBreakfastInRoom);

			if (currentCustomer && validtyCheck)  // not sure if if is needed currently supose to be kastah 
			{
				searchAndPutValuesIntoEmptyRoom(manage, numberOfSleepInRoom, numberOfBreakfastInRoom, currentCustomer);
			}
			else
			{
				printf("unvalid room data has been inputed checkIn has failed");
			}
			
		}
	}
	else
	{
		// if not chosenIndex is 0 => need to check if there is a need to allocate more
		// memory for customers/reservation array as we probably gonna add one
		customerArrayMemoryAllocation(manage);
		reservationArrayMemoryAllocation(manage);
	}

	
	if (chosenIndex)
	{
		//TODO not sure what's gonna happen
		// probably gonna check in a current customer, meaning getting the room info and than go to else (else should probably be a method)
	}
	else
	{
		//TODO something is wrong with the question check inputs requested
		printf("\nplease put the following data inorder to register new customer in \n");


		//method for intake information from user
		getInfoForCheckInCustomer(&numberOfSleepInRoom, &numberOfBreakfastInRoom, &creditCardYear, &creditCardMonth, &creditCardNumber , &customerName);

		customer_t* newCustomerPos = manage->allCustomers + manage->currentAllCustomersSize;

		int successAddCustomer;

		successAddCustomer = addCustomer(newCustomerPos, customerName, creditCardNumber, creditCardYear, creditCardMonth);
		int validRoomData = reservationDataValidityCheck(numberOfSleepInRoom, numberOfBreakfastInRoom);

		if (successAddCustomer)
		{
			manage->currentAllCustomersSize++; // a customer has been added to array

			// if data isnt valid no use to continue
			if (validRoomData)
			{
				searchAndPutValuesIntoEmptyRoom(manage, numberOfSleepInRoom, numberOfBreakfastInRoom, newCustomerPos);
			}
			else
			{
				printf("invalid information has been given for the room, none of the data has been added to the system ");
			}
		}
		else
		{
			printf("invalid information has been given for the customer, customer has not been added to the data-base and has not been checkedIn");
		}
		
		if(found)
		{
			printf("\ncustomer has been checkedIn\n");
		}
	}

}

void searchAndPutValuesIntoEmptyRoom(management_t *manage , int numberOfSleepInRoom ,int numberOfBreakfastInRoom , customer_t *customerPos)
{
	int i = 0;
	int j = 0;
	int foundEmptyRoom = 0;
	while (i < manage->hotel->numOfFloors && !foundEmptyRoom)
	{
		j = 0;
		while (j < manage->hotel->numOfRoomPerFloor && !foundEmptyRoom)
		{
			room_t *currentRoom = &manage->hotel->allRooms[i][j];
			// if room is avilable get all stats inside
			if (currentRoom->available == 1)
			{
				// foundEmptyRoom = 1 break while's
				foundEmptyRoom = 1;
				// change room status and data
				currentRoom->available = 0;
				currentRoom->breakfastRegisterd = numberOfBreakfastInRoom;
				currentRoom->sleepRegisterd = numberOfSleepInRoom;

				// change reservation
				reservation_t *newReservation = (manage->allReservation + manage->currentAllReservationSize);
				newReservation->room = currentRoom;
				newReservation->sleepRegisterd = numberOfSleepInRoom;
				newReservation->breakfastRegisterd = numberOfBreakfastInRoom;
				newReservation->customer = customerPos;

				manage->currentAllReservationSize++;
			}
			j++;
		}
		i++;
	}
	if (!foundEmptyRoom)
	{
		printf("\nthere are no available rooms in the hotel but we saved the customer information.\n");
	}
}





void customerArrayMemoryAllocation(management_t* manage)
{
	// if there is only 1 space left, will allocate more 
	if (manage->currentAllCustomersSize + 1 == manage->allCustomersArraySize)
	{
		customer_t* temp = (customer_t*)realloc(manage->allCustomers, (manage->allCustomersArraySize * 2) * (sizeof(customer_t)));
		if (temp)
		{
			manage->allCustomers = temp;
			manage->allCustomersArraySize = manage->allCustomersArraySize * 2;
		}
		else
		{
			//TODO refine the printf
			printf("error on realloc has happened Bad Memory");
		}
	}
}

void reservationArrayMemoryAllocation(management_t* manage)
{
	// if there is only 1 space left, will allocate more 
	if(manage->currentAllReservationSize + 1 == manage->allReservationArraySize)
	{
		reservation_t* temp2 = (reservation_t*)realloc(manage->allReservation, (manage->allReservationArraySize * 2) * (sizeof(reservation_t)));
		if (temp2)
		{
			manage->allReservation = temp2;
			manage->allReservationArraySize = manage->allReservationArraySize * 2;
		}
		else
		{
			//TODO refine the printf
			printf("error on realloc has happened Bad Memory");
		}
	}
}

void getInfoForCheckInCustomer(int* numberOfSleepInRoom, int* numberOfBreakfastInRoom, int* creditCardYear, int* creditCardMonth, char** creditCardNumber , char** customerName)
{
	int numOfCharInName;
	printf("\nplease enter the number of chars in person's name \n");
	scanf("%d", &numOfCharInName);

	*customerName = (char*)calloc(sizeof(char), numOfCharInName+1); // + 1 for '\0'
	printf("\nplease enter the customer name \n");
	scanf("%s", *customerName);

	//printf("\nplease enter the number of people that sleep in the room \n");
	//scanf("%d", numberOfSleepInRoom);

	//printf("\nplease enter the number of people that eat breakfast in the room \n");
	//scanf("%d", numberOfBreakfastInRoom);
	getInfoForCheckInRoom(numberOfSleepInRoom, numberOfBreakfastInRoom);


	printf("\nplease enter the credit card year number \n");
	scanf("%d", creditCardYear);

	printf("\nplease enter the credit card month number \n");
	scanf("%d", creditCardMonth);

	int numberOfCharsInCreditCardNumber;
	printf("\nplease enter the number of numbers in the credit card number \n");
	scanf("%d", &numberOfCharsInCreditCardNumber);

	*creditCardNumber = (char*)calloc(sizeof(char), numberOfCharsInCreditCardNumber+1);

	printf("\nplease enter the credit card number \n");
	scanf("%s", *creditCardNumber);

}

void getInfoForCheckInRoom(int* numberOfSleepInRoom, int* numberOfBreakfastInRoom)
{
	printf("\nplease enter the number of people that sleep in the room \n");
	scanf("%d", numberOfSleepInRoom);

	printf("\nplease enter the number of people that eat breakfast in the room \n");
	scanf("%d", numberOfBreakfastInRoom);
}



int reservationDataValidityCheck(int sleepNumber, int breakfastNumber)
{
	if (sleepNumber < 1 || sleepNumber > 4)
	{
		return 0;
	}
	else if (breakfastNumber < 0 || breakfastNumber > 4)
	{
		return 0;
	}
	else 
	{
		return 1;
	}

}



//5.4 (not completed)
int checkOut(management_t *manage, unsigned roomNumber)
{
	/*
	steps:
	- extract position of room in the hotel from roomNumber parameter.
	- copy pointer for readable comparassion
	- go over all reservation and if found make reservation's checkout 1(true)
	And reset the room values (making it available(1))
	*/

	// in int's calculations -1 is as matrix starts counting from 0 and not 1 unlike rooms numbering
	int floorNumber = (roomNumber / 100) - 1;
	int roomFloorNumber = (roomNumber % 100) - 1;

	//extrapolate the room pointer from struct
	room_t *checkOutRoom = &manage->hotel->allRooms[floorNumber][roomFloorNumber];

	// go over all reservation and find the room
	int i = 0;
	int goOn = 1;
	while (i < manage->currentAllReservationSize && goOn)
	{
		room_t *roomPointer = (manage->allReservation + i)->room;
		if (roomPointer == checkOutRoom && roomPointer->available == 0)
		{
			// reservation found no need to go over the loop anymore
			goOn = 0;

			// reset room values
			roomPointer->available = 1;
			roomPointer->breakfastRegisterd = 0;
			roomPointer->sleepRegisterd = 0;

			// reservation checkout complete (give true to the reservation)
			(manage->allReservation + i)->checkout = 1;
			return 1;

		}
		i++;
	}

	return 0;
}

customer_t* subStringCustomerArrayGetter(char* subString, management_t* manage)
{
	/*
	steps:
	allocate memory for size of the huge array of customer size
	go over customerArray and each time add a customer match to array advance by counter
	realloc the size of counter to new location
	free the old location
	return the new location
	
		--- for testing purposes will print everyone Inside
	*/
	if (manage->allCustomersArraySize == 0 || manage->allCustomers == NULL)
	{
		printf("\nno customers available returnning null \n");
		return NULL;
	}

	// create maximum size array
	customer_t * tempArray = (customer_t*)calloc(sizeof(customer_t), manage->allCustomersArraySize);
	
	// put inside whoever need to be there
	int counter = 0;
	int i;
	for (i = 0; i < manage->currentAllCustomersSize; i++)
	{
		if (strstr(manage->allCustomers[i].name, subString) != NULL)
		{
			tempArray[counter++] = manage->allCustomers[i];
		}
	}

	customer_t* debug1 = tempArray;
	customer_t* debug2 = tempArray + 1;
	int a = 5;


	// for ending realloc the space of the tempArray and free it.
	// did size +1 for testing on both 431 and 432
	// TODO check comment above + memcpy not working totally good need fix
	customer_t* customerArrayOfSubString = (customer_t*)calloc(sizeof(customer_t), counter+1);
	memcpy(customerArrayOfSubString, tempArray, ( counter+1 * sizeof(customer_t) ) );
	//customer_t* customerArrayOfSubString = (customer_t*)realloc(tempArray, (counter*sizeof(customer_t) )  );

	customer_t* debug11 = customerArrayOfSubString;
	customer_t* debug22 = (customerArrayOfSubString + 1);
	int aa = 5;

	free(tempArray);

	customer_t* debug111 = customerArrayOfSubString;
	customer_t* debug222 = customerArrayOfSubString + 1;
	int aaa = 5;


	// for testing go over customerArrayOfSubString and print customers
	int j = 0;
	while (j < counter)
	{
		customer_t *pos = customerArrayOfSubString + j;
		PRINT_CUSTOMER(pos->id, pos->name, pos->creditCardNumber, pos->creditCardYear, pos->creditCardMonth)
			j++;
	}


	return customerArrayOfSubString;






}


